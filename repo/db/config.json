{
	"project name" 					: {"project_id" 	 : "lambda val : '_'.join(val.split('_')[0:-3])",
										"project" 	 	 : "lambda val : '_'.join(val.split('_')[1:-3])",
							   			"pi" 			 : "lambda val : val.split('_')[0]",
							   			"submission_date": "lambda val : datetime.strptime(val.split('_')[-3], '%y%m%d').date()",
							   			"datatype" 		 : "lambda val : val.split('_')[-2]",
							   			"submission_id"  : "lambda val : val"},
	"pooling id" 					: {"pool_id"         : "lambda val : val"},
	"sample name" 					: {"sample_id" 		 : "lambda val : val.replace(' ', '')"},
	"well" 							: {"well" 			 : "lambda val : val"},
	"pre-norm well" 				: {"pre_norm_well"   : "lambda val : val"},
	"qpcr conc. (nm) / iseq output" : {"qpcr" 			 : "lambda val : val.replace('..', '.')"},
	"fragment size (bp)" 			: {"fragment" 		 : "lambda val : val if len(val) != 0 else None"},
	"labchip/bioanalyzer conc. (nm)": {"labchip_conc"    : "lambda val : val.replace('..', '.')"},
	"index_i5_id" 					: {"i5_id" 			 : "lambda val : val"},
	"index_i5_sequencing" 			: {"i5_sequence"     : "lambda val : val"},
	"index_i7_id" 					: {"i7_id" 			 : "lambda val : val"},
	"index_i7_sequencing" 			: {"i7_sequence" 	 : "lambda val : val"},
	"loading conc. (nm)" 			: {"loading_conc" 	 : "lambda val : val.replace('..', '.') if len(val) != 0 else None"},
	"loading conc. (pm)" 			: {"loading_conc"    : "lambda val : str(float(val.replace('..', '.'))/1000) if len(val) != 0 else None"},
	"reads (pf b )" 				: {"pf_reads" 		 : "lambda val : val[:-1] if val.endswith('B') else (str(float(val[:-1])/1000) if val.endswith('M') else val)"},
	"pf reads"		 				: {"pf_reads" 		 : "lambda val : val[:-1] if val.endswith('B') else (str(float(val[:-1])/1000) if val.endswith('M') else val)"},
	"q30" 							: {"q30" 			 : "lambda val : val"},
	"fc type" 						: {"flowcell_type"   : "lambda val : val"},
	"sequencer" 					: {},
	"lane" 							: {"lane_1" 		 : "lambda val : True if val == 'L1' else False",
										"lane_2" 		 : "lambda val : True if val == 'L2' else False",
										"lane_3" 		 : "lambda val : True if val == 'L3' else False",
										"lane_4" 		 : "lambda val : True if val == 'L4' else False",
										"lane_5" 		 : "lambda val : True if val == 'L5' else False",
										"lane_6" 		 : "lambda val : True if val == 'L6' else False",
										"lane_7" 		 : "lambda val : True if val == 'L7' else False",
										"lane_8" 		 : "lambda val : True if val == 'L8' else False",
										"lane"			 : "lambda val : val"										
	},
	"fc" 							: {"flowcell_id" 	 : "lambda val : val"},
	"order no" 						: {"order_no" 		 : "lambda val : val"},
	"loaded by" 					: {"loaded_by" 		 : "lambda val : val"},
	"loading date" 				 	: {},
	"completion date" 				: {"completion_date" : "lambda val : val"},
	"run duration (h:m)" 			: {},
	"urgency" 						: {"urgent" 		 : "lambda val : val"},
	"remark" 						: {"remark" 		 : "lambda val : val"},
	"comments" 						: {"srv" 			 : "lambda val : val.split(' ')[1].split(':')[1] if (val != '' and len(val.split(' ')) > 1 and len(val.split(' ')[1].split(':')) == 2 and  val.split(' ')[1].split(':')[0] == 'SRV') else ''",
										"rg" 			 : "lambda val : val.split(' ')[2].split(':')[1] if (val != '' and len(val.split(' ')) > 2 and len(val.split(' ')[2].split(':')) == 2 and  val.split(' ')[2].split(':')[0] == 'RG') else ''",
										"cov" 		 	 : "lambda val : val.split(' ')[3].split(':')[1] if (val != '' and len(val.split(' ')) > 3 and len(val.split(' ')[3].split(':')) == 2 and  val.split(' ')[3].split(':')[0] == 'COV') else ''",
										"anl" 			 : "lambda val : val.split(' ')[4].split(':')[1] if (val != '' and len(val.split(' ')) > 4 and len(val.split(' ')[4].split(':')) == 2 and  val.split(' ')[4].split(':')[0] == 'ANL') else ''",
										"comment"		 : "lambda val : val"
		},
	"data_sample_status" 			: {"status" 		 : "lambda val : val"},
	"submission id" 				: {},
	"libaries and info received date":{"lib_received" 	 : "lambda val : val"},
	"libaries and info received and due date":{"lib_received" 	 : "lambda val : val"},
	"original sample name" 			: {"sample_name" 	 : "lambda val : val"},
	"data requirement" 				: {"requirement" 	 : "lambda val : val"},
	"data update contacts" 			: {},
	"sample qc p/f" 				: {"sample_qc" 		 : "lambda val : val"},
	"lib qc p/f" 					: {"lib_qc" 		 : "lambda val : val"}
}

